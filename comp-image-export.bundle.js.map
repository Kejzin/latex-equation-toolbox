{"version":3,"sources":["webpack:///./src/components/ImageExport/index.tsx","webpack:///./src/components/ImageExport/mathjax-setup.js"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactRedux","_styledComponents","_interopRequireDefault","_mathjaxSetup","_imageExport","ScrollBox","default","div","withConfig","displayName","componentId","Container","Title","h2","MathImageWrapper","ImageExport","_this","_classCallCheck","this","oldLatex","newestPromise","undefined","Component","props","latex","dispatch","localPromise","Promise","resolve","setTimeout","self","then","res","mj2img","output","actions","updateImage","img","svg","svgData","generatePNG","window","btoa","unescape","encodeURIComponent","imageExport","createElement","src","png","connect","store","input","r","__webpack_exports__","MathJax","AuthorInit","console","log","loadListeners","jax","extensions","showMathMenu","showProcessingMessages","messageStyle","SVG","useGlobalCache","TeX","Hub","Register","StartupHook","callback","concat","wrapper","document","innerHTML","Queue","mjOut","getElementsByTagName","setAttribute","widthStr","getAttribute","heightStr","width","substr","length","Number","height","outerHTML","image","Image","onload","canvas","getContext","drawImage","toDataURL","_i","listener","d","script","type","async","appendChild","push"],"mappings":"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","file":"comp-image-export.bundle.js","sourcesContent":["import * as React from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport loadMj2img from './mathjax-setup'\nimport { actions } from '../../reducers/image-export'\n\nconst ScrollBox = styled.div`\n  overflow-y: scroll;\n  height: 100%;\n`\n\nconst Container = styled.div`\n  margin: 8px 12px 16px;\n`\n\nconst Title = styled.h2`\n  margin: 0;\n`\n\nconst MathImageWrapper = styled.div`\n  background-color: white;\n  display: table;\n`\n\ninterface PropsType {\n  latex: string\n  imageExport: any\n  dispatch(action: any)\n}\n\ndeclare global {\n  interface window {\n    MathJax: any\n  }\n}\n\nclass ImageExport extends React.Component<PropsType, any> {\n  oldLatex = ''\n  newestPromise = undefined\n\n  generatePNG() {\n    if (this.props.latex === this.oldLatex) {\n      return\n    }\n\n    let dispatch = this.props.dispatch\n\n    let localPromise = new Promise(resolve => {\n      setTimeout(resolve, 400)\n    })\n    this.newestPromise = localPromise\n\n    let self = this\n\n    function updateMath() {\n      loadMj2img().then(mj2img => {\n        mj2img(self.props.latex, function(output) {\n          dispatch(actions.updateImage(output.img, output.svg, output.svgData))\n          //document.getElementById(\"target\").innerHTML = output.svg;\n        })\n      })\n    }\n\n    localPromise.then(res => {\n      if (localPromise === self.newestPromise) {\n        updateMath()\n      }\n    })\n  }\n\n  render() {\n    this.generatePNG()\n\n    let svgData =\n      'data:image/svg+xml;base64,' +\n      window.btoa(unescape(encodeURIComponent(this.props.imageExport.svg)))\n\n    this.oldLatex = this.props.latex\n    return (\n      <ScrollBox>\n        <Container>\n          <Title>Image export view</Title>\n          You can drag and drop the images below, into other applications or a\n          folder.\n          <br />\n          <br />\n          SVG\n          <br />\n          <MathImageWrapper>\n            <img src={this.props.imageExport.svgData} />\n          </MathImageWrapper>\n          <br />\n          PNG\n          <br />\n          <MathImageWrapper>\n            <img src={this.props.imageExport.png} />\n          </MathImageWrapper>\n        </Container>\n      </ScrollBox>\n    )\n  }\n}\n\nexport default connect(store => ({\n  latex: store.input.latex,\n  imageExport: store.imageExport,\n}))(ImageExport)\n","let mj2img\n\nwindow.MathJax = {\n  AuthorInit: function() {\n    console.log('Initialization')\n  },\n}\n\nlet loadListeners = []\n\n// Thanks to Peter Krautzberger for his codepen https://codepen.io/pkra/details/PZLyQO\nwindow.MathJax = {\n  jax: ['input/TeX', 'output/SVG'],\n  extensions: ['tex2jax.js', 'MathMenu.js', 'MathZoom.js'],\n  showMathMenu: false,\n  showProcessingMessages: false,\n  messageStyle: 'none',\n  SVG: {\n    useGlobalCache: false,\n  },\n  TeX: {\n    extensions: ['AMSmath.js', 'AMSsymbols.js', 'autoload-all.js'],\n  },\n  AuthorInit: function() {\n    console.log('AuthorInit called')\n    MathJax.Hub.Register.StartupHook('End', function() {\n      mj2img = function(latex, callback) {\n        let texstring = `\\\\[${latex}\\\\]`\n\n        var input = texstring\n\n        var wrapper = document.createElement('div')\n\n        wrapper.innerHTML = input\n\n        var output = { svg: '', img: '' }\n        MathJax.Hub.Queue(['Typeset', MathJax.Hub, wrapper])\n        MathJax.Hub.Queue(function() {\n          var mjOut = wrapper.getElementsByTagName('svg')[0]\n\n          if (typeof mjOut == 'undefined') {\n            return\n          }\n\n          mjOut.setAttribute('xmlns', 'http://www.w3.org/2000/svg')\n\n          // Example \"22.676ex\"\n          let widthStr = mjOut.getAttribute('width')\n          let heightStr = mjOut.getAttribute('height')\n\n          let scale = 1.4\n\n          if (widthStr) {\n            let width = widthStr.substr(0, widthStr.length - 2)\n            width = Number(width)\n            mjOut.setAttribute('width', `${width * scale}ex`)\n          }\n\n          if (heightStr) {\n            let height = heightStr.substr(0, heightStr.length - 2)\n            height = Number(height)\n            mjOut.setAttribute('height', `${height * scale}ex`)\n          }\n\n          // thanks, https://spin.atomicobject.com/2014/01/21/convert-svg-to-png/\n          output.svg = mjOut.outerHTML\n          var image = new Image()\n          let svgData =\n            'data:image/svg+xml;base64,' +\n            window.btoa(unescape(encodeURIComponent(output.svg)))\n          output.svgData = svgData\n          image.src = svgData\n          image.onload = function() {\n            var canvas = document.createElement('canvas')\n            if (image.width > 0 && image.height > 0) {\n              canvas.width = image.width\n              canvas.height = image.height\n              var context = canvas.getContext('2d')\n              context.drawImage(image, 0, 0)\n              output.img = canvas.toDataURL('image/png')\n            }\n            callback(output)\n          }\n        })\n      }\n\n      for (let listener of loadListeners) {\n        listener(mj2img)\n      }\n\n      loadListeners = []\n\n      // mj2img(\"\\\\[e=\\\\frac{mc^2}{2}\\\\]\", function (output) {\n      //   console.log('here', output)\n      //   //document.getElementById(\"target\").innerHTML = output.svg;\n      // });\n    })\n  },\n}\n;(function(d, script) {\n  script = d.createElement('script')\n  script.type = 'text/javascript'\n  script.async = true\n  script.onload = function() {\n    // remote script has loaded\n  }\n  script.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js'\n  d.getElementsByTagName('head')[0].appendChild(script)\n})(document)\n\n// export default () => {\n//   return mj2img\n// }\n\nexport default () => {\n  return new Promise(resolve => {\n    if (mj2img === undefined) {\n      loadListeners.push(resolve)\n    } else {\n      resolve(mj2img)\n    }\n  })\n}\n"],"sourceRoot":""}