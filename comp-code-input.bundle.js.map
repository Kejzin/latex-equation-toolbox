{"version":3,"sources":["webpack:///./src/components/CodeInput/index.tsx"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactRedux","_reactCodemirror","_styledComponents","_input","CodeMirrorGlobalStyles","createGlobalStyle","_templateObject","Container","default","div","withConfig","displayName","componentId","CodeMirrorStyled","Controlled","CodeInput","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","onInputChange","bind","_assertThisInitialized","codeMirrorElm","editor","Component","data","value","changeLatex","_this2","themeName","darkTheme","createElement","options","theme","lineWrapping","ref","el","latex","onBeforeChange","onChange","editorDidMount","x","connect","state","input","settings","actions"],"mappings":"4JAAA,IAAAA,EAAAC,EAAAC,EAAA,IACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,KACAG,EAAAJ,EAAAC,EAAA,MAEAI,EAAAJ,EAAA,ivCAEAA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KAER,IAAMK,GAAsB,EAAGF,EAAAG,mBAAHC,KAMtBC,EAAYL,EAAAM,QAAOC,IAAVC,YAAAC,YAAA,uBAAAC,YAAA,gBAAGV,EAAH,iBAITW,GAAmB,EAAAX,EAAAM,SAAOP,EAAAa,YAAVJ,YAAAC,YAAA,8BAAAC,YAAA,gBAAG,EAAH,mDAahBG,cAIJ,SAAAA,EAAYC,GAAK,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,IACfE,uEAAAG,CAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAMH,KAEDO,cAAgBN,EAAKM,cAAcC,KAAnBC,IAAAR,KACrBA,EAAKS,cAAgB,KACrBT,EAAKU,OAAS,KALCV,8OAJKpB,EAAM+B,iGAYdD,EAAQE,EAAMC,GAC1BX,KAAKH,MAAMe,YAAYD,oCAEnB,IAAAE,EAAAb,KACEc,EAAYd,KAAKH,MAAMkB,UAAY,UAAY,eAErD,OACErC,EAAAsC,cAAC5B,EAAS,KACRV,EAAAsC,cAAC/B,EAAsB,MACvBP,EAAAsC,cAACtB,GACCuB,SACEC,MAAOJ,EACPK,cAAc,GAEhBC,IAAK,SAAAC,GACHR,EAAKN,cAAgBc,GAEvBV,MAAOX,KAAKH,MAAMyB,MAClBC,eAAgBvB,KAAKI,cACrBoB,SAAU,aACVC,eAAgB,SAAAC,GACdb,EAAKL,OAASkB,kBAQX,EAAA7C,EAAA8C,SACb,SAAAC,GAAK,OACHN,MAAOM,EAAMC,MAAMP,MACnBP,UAAWa,EAAME,SAASf,YAE5B/B,EAAA+C,QALa,CAMbnC","file":"comp-code-input.bundle.js","sourcesContent":["import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport styled, { createGlobalStyle } from 'styled-components'\n\nimport { actions } from '../../reducers/input'\n\nrequire('codemirror/lib/codemirror.css')\nrequire('codemirror/mode/stex/stex')\nrequire('codemirror/theme/monokai.css')\nrequire('codemirror/theme/base16-light.css')\n\nconst CodeMirrorGlobalStyles = createGlobalStyle`\n  .CodeMirror {\n    height: 100% !important;\n  }\n`\n\nconst Container = styled.div`\n  height: 100%;\n`\n\nconst CodeMirrorStyled = styled(CodeMirror)`\n  height: 100vh;\n  background-color: #222 !important;\n`\n\ninterface PropsType {\n  latex: string\n  darkTheme: boolean\n  changeLatex(value: string): void\n}\n\ninterface StateType {}\n\nclass CodeInput extends React.Component<PropsType, StateType> {\n  codeMirrorElm: any\n  editor: CodeMirror.Editor\n\n  constructor(props) {\n    super(props)\n\n    this.onInputChange = this.onInputChange.bind(this)\n    this.codeMirrorElm = null\n    this.editor = null\n  }\n\n  onInputChange(editor, data, value) {\n    this.props.changeLatex(value)\n  }\n  render() {\n    const themeName = this.props.darkTheme ? 'monokai' : 'base16-light'\n\n    return (\n      <Container>\n        <CodeMirrorGlobalStyles />\n        <CodeMirrorStyled\n          options={{\n            theme: themeName,\n            lineWrapping: true,\n          }}\n          ref={el => {\n            this.codeMirrorElm = el\n          }}\n          value={this.props.latex}\n          onBeforeChange={this.onInputChange}\n          onChange={() => {}}\n          editorDidMount={x => {\n            this.editor = x\n          }}\n        />\n      </Container>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    latex: state.input.latex,\n    darkTheme: state.settings.darkTheme,\n  }),\n  actions\n)(CodeInput)\n"],"sourceRoot":""}